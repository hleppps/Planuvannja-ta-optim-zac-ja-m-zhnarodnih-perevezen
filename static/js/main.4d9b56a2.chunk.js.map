{"version":3,"sources":["components/CountriesListItem/CountriesListItem.module.css","components/CountriesList/CountriesList.module.css","components/Header/Header.module.css","components/Layout/Layout.module.css","components/Card/Card.module.css","components/LoadingSpinner/LoadingSpinner.module.css","components/Lines/Lines.module.css","components/Markers/Markers.module.css","components/Map/Map.module.css","components/Card/index.js","components/Card/Card.js","store/countries-context.js","utils/constants.js","components/CountriesListItem/index.js","components/CountriesListItem/CountriesListItem.js","components/LoadingSpinner/index.js","components/LoadingSpinner/LoadingSpinner.js","components/CountriesList/CountriesList.js","components/CountriesList/index.js","components/Header/index.js","components/Header/Header.js","components/Layout/index.js","components/Layout/Layout.js","components/Lines/index.js","components/Lines/Lines.js","components/Markers/index.js","components/Markers/Markers.js","components/Map/index.js","components/Map/Map.js","utils/api.js","App.js","utils/sorting-algorithm.js","store/CountriesProvider.js","index.js"],"names":["module","exports","Card","props","className","styles","card","children","CountriesContext","React","createContext","selectedCountries","sortedCoordinates","addSelectedCountry","removeSelectedCountry","selectedCoordinates","dragItem","allFlags","set","get","FIREBASE_DOMAIN","COUNTRIES_API_DOMAIN","LIST_TYPE_ADD","LIST_TYPE_REMOVE","ADD_COUNTRY","REMOVE_COUNTRY","THEME_LIGHT","THEME_DARK","CountriesListItem","useContext","listItem","onClick","onSelectCountry","countryName","draggable","onDragStart","event","item","list","listType","country","type","onDragEnd","name","flag","src","flagUrl","alt","LoadingSpinner","spinner","CountriesList","flags","isLoading","Object","keys","length","highlightedBorder","highlighted","border","selectCountryHandler","CONSTANTS","listItems","countries","filter","includes","map","title","subtitle","style","onDragOver","preventDefault","onDrop","Header","header","logo","changeThemeHandler","Layout","memo","layout","main","Lines","lines","coordinatePair","index","line","from","to","stroke","strokeWidth","strokeLinecap","Markers","allCoordinates","markers","marker","coordinates","r","textAnchor","y","Map","projectionConfig","center","scale","geography","geoUrl","countriesDrawHandler","fetchData","url","a","fetch","response","data","json","reformatData","itemsToReformat","reformatedData","countryInfo","reformatedItems","getAllCountries","getAllCoordinates","getAllFlags","App","useState","setCountries","theme","setTheme","setAllCoordinates","setAllFlags","useCallback","coordinatesData","flagsData","useEffect","forEach","property","propertyValue","getComputedStyle","document","documentElement","getPropertyValue","setProperty","prevTheme","geographies","fill","rsmKey","sortingAlgorithm","points","id","values","coordinates1","coordinates2","mainPoint","subPoint","push","value","JSON","parse","Math","sqrt","abs","pow","getValues","path","TSPSolver","result","valueName","console","log","coordinatePairs","secondCoordinatePair","defaultSelectedCountriesState","selectedCountriesReducer","state","action","countryCoordinates","filteredCountries","CountriesProvider","setDragItem","setSortedCoordinates","useReducer","dispatchSelectedCountries","selectedCoutriesCoordinates","actions","useMemo","addCountry","removeCountry","countriesContext","Provider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4d9b56a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"CountriesListItem_listItem__dvzpZ\",\"name\":\"CountriesListItem_name__OYClZ\",\"flag\":\"CountriesListItem_flag__2bKSl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"CountriesList_list__7ivSk\",\"title\":\"CountriesList_title__1MTZZ\",\"subtitle\":\"CountriesList_subtitle__fYhCA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"Layout_layout__3PvPc\",\"main\":\"Layout_main__1dFZc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1eE8R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"LoadingSpinner_spinner__3AWWB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"line\":\"Lines_line__2kpHs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"marker\":\"Markers_marker__blx3M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"Map_map__2bGnQ\"};","import Card from \"./Card\";\n\nexport default Card;\n","import React from \"react\";\nimport styles from \"./Card.module.css\";\n\nconst Card = (props) => {\n  return <div className={styles.card}>{props.children}</div>;\n};\nexport default Card;\n","import React from \"react\";\n\nconst CountriesContext = React.createContext({\n  selectedCountries: [],\n  sortedCoordinates: [],\n  addSelectedCountry: () => {},\n  removeSelectedCountry: () => {},\n  selectedCoordinates: {},\n  dragItem: {},\n  allFlags: { set: ()=>{}, get: []}\n});\n\nexport default CountriesContext;\n","export const FIREBASE_DOMAIN =\n  \"https://traveling-salesman-probl-12def-default-rtdb.europe-west1.firebasedatabase.app\";\nexport const COUNTRIES_API_DOMAIN =\n  \"https://countriesnow.space/api/v0.1/countries\";\nexport const GEO_DOMAIN =\n  // \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n  \"https://raw.githubusercontent.com/deldersveld/topojson/master/continents/europe.json\"\n\nexport const LIST_TYPE_ADD = \"ADD\";\nexport const LIST_TYPE_REMOVE = \"REMOVE\";\n\nexport const TITLE_ALL_COUNTRIES = \"All Countries\";\nexport const TITLE_SELECTED_COUNTRIES = \"Selected Countries\";\n\nexport const SUBTITLE_ALL_COUNTRIES = \"(drag to select)\";\nexport const SUBTITLE_SELECTED_COUNTRIES = \"(drag to remove)\";\n\nexport const ADD_COUNTRY = \"ADD_COUNTRY\";\nexport const REMOVE_COUNTRY = \"REMOVE_COUNTRY\";\n\nexport const THEME_LIGHT = \"light\";\nexport const THEME_DARK = \"dark\";\n\nexport const HIGHLIGHTED_LIST_BORDER = \"0.5rem dashed #c5efc5\";\n\nexport const MAP_REGION = 'Europe'","import CountriesListItem from \"./CountriesListItem\"\n\nexport default CountriesListItem","import { useContext } from \"react\";\nimport CountriesContext from \"../../store/countries-context\";\nimport styles from \"./CountriesListItem.module.css\";\n\nconst CountriesListItem = (props) => {\n  const { dragItem } = useContext(CountriesContext);\n\n  const selectCountryHandler = () => {\n    props.onSelectCountry(props.countryName);\n  };\n\n  const dragStartHandler = (event, item, list) => {\n    dragItem.set({ country: item, type: list });\n  };\n\n  const dragEndHandler = () => {\n    dragItem.set({});\n  };\n\n  return (\n    <li\n      data-testid=\"countryListItem\"\n      className={styles.listItem}\n      onClick={selectCountryHandler}\n      draggable={true}\n      onDragStart={(event) =>\n        dragStartHandler(event, props.countryName, props.listType)\n      }\n      onDragEnd={() => dragEndHandler()}\n    >\n      <p data-testid=\"countryName\" className={styles.name}>\n        {props.countryName}\n      </p>\n      <img\n        data-testid=\"flag\"\n        className={styles.flag}\n        src={props.flagUrl}\n        alt={props.flagUrl}\n        draggable={false}\n      />\n    </li>\n  );\n};\n\nexport default CountriesListItem;\n","import LoadingSpinner from \"./LoadingSpinner\";\n\nexport default LoadingSpinner;\n","import styles from \"./LoadingSpinner.module.css\";\n\nconst LoadingSpinner = () => {\n  return <div className={styles.spinner}></div>;\n};\n\nexport default LoadingSpinner;\n","import { useContext } from \"react\";\nimport CountriesContext from \"../../store/countries-context\";\nimport * as CONSTANTS from \"../../utils/constants\";\nimport CountriesListItem from \"../CountriesListItem\";\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport styles from \"./CountriesList.module.css\";\n\nconst CountriesList = (props) => {\n  const {\n    selectedCountries,\n    addSelectedCountry,\n    removeSelectedCountry,\n    allFlags,\n    dragItem,\n  } = useContext(CountriesContext);\n  const flags = allFlags.get;\n  const isLoading = !Object.keys(flags).length;\n\n  let highlightedBorder = props.highlighted\n    ? { border: CONSTANTS.HIGHLIGHTED_LIST_BORDER }\n    : null;\n\n  const selectCountryHandler = (countryName, listType = props.listType) => {\n    if (listType === CONSTANTS.LIST_TYPE_ADD) {\n      addSelectedCountry(countryName);\n    } else if (listType === CONSTANTS.LIST_TYPE_REMOVE) {\n      removeSelectedCountry(countryName);\n    }\n  };\n\n  const dropListHandler = () => {\n    dragItem.set({});\n    if (dragItem.get.type !== props.listType) {\n      selectCountryHandler(dragItem.get.country, dragItem.get.type);\n    }\n  };\n\n  const listItems = props.countries\n    .filter((country) => {\n      if (props.listType === CONSTANTS.LIST_TYPE_ADD) {\n        return !selectedCountries.includes(country);\n      } else {\n        return country;\n      }\n    })\n    .map((country) => {\n      return (\n        <CountriesListItem\n          data-testid=\"countriesList\"\n          key={country}\n          flagUrl={flags[country]}\n          countryName={country}\n          listType={props.listType}\n          onSelectCountry={selectCountryHandler}\n        />\n      );\n    });\n\n  return (\n    <>\n      <h2 className={styles.title}>{props.title}</h2>\n      <p className={styles.subtitle}>{props.subtitle}</p>\n      <ul\n        data-testid=\"countriesList\"\n        style={highlightedBorder}\n        className={styles.list}\n        onDragOver={(event) => {\n          event.preventDefault();\n        }}\n        onDrop={() => dropListHandler()}\n      >\n        {isLoading && props.listType === CONSTANTS.LIST_TYPE_ADD && (\n          <>\n            <LoadingSpinner />\n            <h3>Loading...</h3>\n          </>\n        )}\n        {!isLoading && listItems}\n      </ul>\n    </>\n  );\n};\n\nexport default CountriesList;\n","import CountriesList from \"./CountriesList\";\n\nexport default CountriesList;\n","import Header from \"./Header\";\n\nexport default Header","import styles from \"./Header.module.css\";\n\nconst Header = (props) => {\n  return (\n    <header className={styles.header}>\n      <h1>TRAVELLING SALESMAN PROBLEM</h1>\n      <button data-testid=\"button\" className={styles.logo} onClick={props.changeThemeHandler}></button>\n    </header>\n  );\n};\n\nexport default Header;\n","import Layout from \"./Layout\"\n\nexport default Layout","import React from \"react\";\nimport Header from \"../Header\";\nimport styles from \"./Layout.module.css\"\n\nconst Layout = React.memo((props) => {\n  return (\n    <div className={styles.layout}>\n      <Header changeThemeHandler={props.changeThemeHandler} />\n      <main className={styles.main}>{props.children}</main>\n    </div>\n  );\n});\n\nexport default Layout;\n","import Lines from \"./Lines\";\n\nexport default Lines;\n","import React, { useContext } from \"react\";\nimport { Line } from \"react-simple-maps\";\nimport CountriesContext from \"../../store/countries-context\";\nimport styles from \"./Lines.module.css\";\n\nconst Lines = () => {\n  // sortedCoordinates - [[x1, y1], [x2, y2]]\n  const { sortedCoordinates } = useContext(CountriesContext);\n\n  const lines = sortedCoordinates.map((coordinatePair, index) => {\n    return (\n      <Line\n        className={styles.line}\n        key={index}\n        from={coordinatePair[0]}\n        to={coordinatePair[1]}\n        stroke=\"#FF5533\"\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n      />\n    );\n  });\n\n  return <>{lines}</>;\n};\n\nexport default Lines;\n","import Markers from \"./Markers\"\n\nexport default Markers","import React, { useContext } from \"react\";\nimport { Marker } from \"react-simple-maps\";\nimport CountriesContext from \"../../store/countries-context\";\nimport styles from \"./Markers.module.css\";\n\nconst Markers = React.memo(() => {\n  // selectedCoordinates - [[x1, y1], [x2, y2]]\n  const { selectedCountries, allCoordinates } = useContext(CountriesContext);\n\n  const markers = selectedCountries.map((countryName) => {\n    return (\n      <Marker\n        className={styles.marker}\n        key={countryName}\n        coordinates={allCoordinates.get[countryName]}\n      >\n        <circle r={6} stroke=\"#fff\" strokeWidth={2} />\n\n        <text textAnchor=\"middle\" y=\"25\">\n          {countryName}\n        </text>\n      </Marker>\n    );\n  });\n\n  return <>{markers}</>;\n});\n\nexport default Markers;\n","import Map from \"./Map\"\n\nexport default Map","import React from \"react\";\nimport { ComposableMap, Geographies } from \"react-simple-maps\";\nimport Lines from \"../Lines\";\nimport Markers from \"../Markers\";\nimport styles from \"./Map.module.css\";\n\nconst Map = React.memo((props) => {\n  return (\n    <ComposableMap\n      className={styles.map}\n      projectionConfig={{\n        center: [9, 49],\n        scale: 1100,\n      }}\n    >\n      <Geographies data-testid=\"geographies\" geography={props.geoUrl}>\n        {props.countriesDrawHandler}\n      </Geographies>\n      <Lines />\n      <Markers />\n    </ComposableMap>\n  );\n});\n\nexport default Map;\n","import * as CONSTANTS from \"./constants\";\n\nasync function fetchData(url) {\n  const response = await fetch(url);\n  const data = response.json();\n  return data;\n}\n\nfunction reformatData(data, itemsToReformat) {\n  // {name: [data]}\n  const reformatedData = {};\n  for (const countryInfo of data) {\n    const countryName = countryInfo[\"name\"];\n    const reformatedItems = itemsToReformat.map((item) => countryInfo[item]);\n    reformatedData[countryName] = reformatedItems;\n  }\n  return reformatedData;\n}\n\nexport async function getAllCountries() {\n  const data = await fetchData(`${CONSTANTS.FIREBASE_DOMAIN}/countries.json`);\n  return data;\n}\n\nexport async function getAllCoordinates() {\n  const { data } = await fetchData(\n    `${CONSTANTS.COUNTRIES_API_DOMAIN}/positions`\n  );\n\n  const itemsToReformat = [\"long\", \"lat\"];\n  const reformatedData = reformatData(data, itemsToReformat);\n  return reformatedData;\n}\n\nexport async function getAllFlags() {\n  const { data } = await fetchData(\n    `${CONSTANTS.COUNTRIES_API_DOMAIN}/flag/images`\n  );\n\n  const itemsToReformat = [\"flag\"];\n  const reformatedData = reformatData(data, itemsToReformat);\n  return reformatedData;\n}","import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Geography } from \"react-simple-maps\";\nimport Card from \"./components/Card\";\nimport CountriesList from \"./components/CountriesList\";\nimport Layout from \"./components/Layout\";\nimport Map from \"./components/Map\";\nimport CountriesContext from \"./store/countries-context\";\nimport { getAllCoordinates, getAllCountries, getAllFlags } from \"./utils/api\";\nimport * as CONSTANTS from \"./utils/constants\";\n\nconst App = () => {\n  const [countries, setCountries] = useState([]);\n  const [theme, setTheme] = useState(CONSTANTS.THEME_DARK);\n  const { allCoordinates, allFlags, selectedCountries, dragItem } =\n    useContext(CountriesContext);\n\n  const setAllCoordinates = allCoordinates.set;\n  const setAllFlags = allFlags.set;\n\n  const fetchData = useCallback(async () => {\n    const countries = await getAllCountries();\n    setCountries(countries);\n\n    const coordinatesData = await getAllCoordinates();\n    setAllCoordinates(coordinatesData);\n\n    const flagsData = await getAllFlags();\n    setAllFlags(flagsData);\n  }, [setCountries, setAllCoordinates, setAllFlags]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  useEffect(() => {\n    const properties = [\n      `-primary-color`,\n      `-secondary-color`,\n      `-list-color`,\n      `-list-border-color`,\n      `-text-color`,\n      `-text-border-color`,\n      `-card-border-color`,\n      `-marker-color`,\n      `-line-color`,\n    ];\n\n    properties.forEach((property) => {\n      const propertyValue = getComputedStyle(\n        document.documentElement\n      ).getPropertyValue(`--${theme + property}`);\n      document.documentElement.style.setProperty(\n        `--selected${property}`,\n        propertyValue\n      );\n    });\n  }, [theme]);\n\n  const countriesDrawHandler = ({ geographies }) => {\n    const filteredCountries = geographies.filter((country) => {\n      return countries\n    });\n\n    const geographyComponentsArray = filteredCountries.map((country) => {\n      return (\n        <Geography\n          key={country.rsmKey}\n          geography={country}\n          fill=\"#EAEAEC\"\n          stroke=\"#D6D6DA\"\n        />\n      );\n    });\n    return geographyComponentsArray;\n  };\n\n  const changeThemeHandler = () => {\n    setTheme((prevTheme) => {\n      if (prevTheme === CONSTANTS.THEME_LIGHT) {\n        return CONSTANTS.THEME_DARK;\n      } else {\n        return CONSTANTS.THEME_LIGHT;\n      }\n    });\n  };\n\n\n  return (\n    <>\n      <Layout changeThemeHandler={changeThemeHandler}>\n        <Map\n          countriesDrawHandler={countriesDrawHandler}\n          geoUrl={CONSTANTS.GEO_DOMAIN}\n        />\n        <Card>\n          <CountriesList\n            listType={CONSTANTS.LIST_TYPE_ADD}\n            countries={countries}\n            title={CONSTANTS.TITLE_ALL_COUNTRIES}\n            subtitle={CONSTANTS.SUBTITLE_ALL_COUNTRIES}\n            highlighted={dragItem.get.type === CONSTANTS.LIST_TYPE_REMOVE}\n          ></CountriesList>\n          <CountriesList\n            listType={CONSTANTS.LIST_TYPE_REMOVE}\n            countries={selectedCountries}\n            title={CONSTANTS.TITLE_SELECTED_COUNTRIES}\n            subtitle={CONSTANTS.SUBTITLE_SELECTED_COUNTRIES}\n            highlighted={dragItem.get.type === CONSTANTS.LIST_TYPE_ADD}\n          ></CountriesList>\n        </Card>\n      </Layout>\n    </>\n  );\n};\n\nexport default App;\n","import TSPSolver from '@nikbelikov/tsp-solver';\n\nconst getDistance = (coordinates1, coordinates2) => {\n  if (!coordinates2) return 0;\n  const distance = Math.sqrt(\n    Math.abs(\n      Math.pow(coordinates1[0] - coordinates2[0], 2) +\n        Math.pow(coordinates1[1] - coordinates2[1], 2)\n    )\n  );\n  return distance;\n};\n\nconst getPoints = (coordinates) => {\n  return coordinates.map((coordinatePair, index) => ({id: index, name: `${coordinatePair}` }))\n}\n\nconst getValues = (points) => {\n  const values = []\n  for (const mainPoint of points) {\n    for (const subPoint of points) {\n      if (subPoint.id <= mainPoint.id) {\n        continue\n      }\n      values.push({set: [mainPoint.id, subPoint.id], value: getDistance(JSON.parse(`[${mainPoint.name}]`), JSON.parse(`[${subPoint.name}]`))})\n    }\n  }\n  return values\n}\n\nconst sortingAlgorithm = (selectedCoordinates) => {\n  const points = getPoints(selectedCoordinates)\n  \n  const values = getValues(points)\n  const {result: sortedValues} = TSPSolver(points, values)\n  const path = sortedValues.map(({name: valueName}) => JSON.parse(`[${valueName}]`))\n  console.log(values);\n  path.push(path[0])\n  \n  const coordinatePairs = path.map((coordinatePair, index, coordinates) => {\n    let secondCoordinatePair = coordinates[index + 1];\n    if (index === coordinates.length - 1) {\n      secondCoordinatePair = coordinates[0];\n    }\n    return [coordinatePair, secondCoordinatePair];\n  });\n  \n  return coordinatePairs;\n};\n\nexport default sortingAlgorithm;\n","import React, { useEffect, useMemo, useReducer, useState } from \"react\";\nimport CountriesContext from \"./countries-context\";\nimport * as CONSTANTS from \"../utils/constants\";\nimport sortingAlgorithm from \"../utils/sorting-algorithm\";\n\nconst defaultSelectedCountriesState = {\n  /* countryName: [long, lat] */\n};\n\nconst selectedCountriesReducer = (state, action) => {\n  switch (action.type) {\n    case CONSTANTS.ADD_COUNTRY:\n      return { ...state, [action.countryName]: action.countryCoordinates };\n\n    case CONSTANTS.REMOVE_COUNTRY:\n      const filteredCountries = state;\n      delete filteredCountries[action.countryName];\n      return { ...filteredCountries };\n\n    default:\n      return defaultSelectedCountriesState;\n  }\n};\n\nconst CountriesProvider = (props) => {\n  const [dragItem, setDragItem] = useState([]);\n  const [allCoordinates, setAllCoordinates] = useState({});\n  const [allFlags, setAllFlags] = useState({});\n  const [sortedCoordinates, setSortedCoordinates] = useState([]);\n  const [selectedCountries, dispatchSelectedCountries] = useReducer(\n    selectedCountriesReducer,\n    defaultSelectedCountriesState\n  );\n\n  useEffect(() => {\n    const selectedCoutriesCoordinates = Object.values(selectedCountries);\n    setSortedCoordinates(sortingAlgorithm(selectedCoutriesCoordinates));\n  }, [selectedCountries]);\n\n  const actions = useMemo(\n    () => ({\n      addCountry: (countryName) => {\n        dispatchSelectedCountries({\n          type: CONSTANTS.ADD_COUNTRY,\n          countryName,\n          countryCoordinates: allCoordinates[countryName],\n        });\n      },\n      removeCountry: (countryName) => {\n        dispatchSelectedCountries({\n          type: CONSTANTS.REMOVE_COUNTRY,\n          countryName,\n        });\n      },\n    }),\n    [allCoordinates]\n  );\n\n  const addSelectedCountryHandler = (countryName) => {\n    actions.addCountry(countryName);\n  };\n\n  const removeSelectedCountryHandler = (countryName) => {\n    actions.removeCountry(countryName);\n  };\n\n  const countriesContext = {\n    selectedCountries: Object.keys(selectedCountries),\n    addSelectedCountry: addSelectedCountryHandler,\n    removeSelectedCountry: removeSelectedCountryHandler,\n    sortedCoordinates: sortedCoordinates,\n\n    dragItem: { set: setDragItem, get: dragItem },\n    allCoordinates: { set: setAllCoordinates, get: allCoordinates },\n    allFlags: { set: setAllFlags, get: allFlags },\n  };\n\n  return (\n    <CountriesContext.Provider value={countriesContext}>\n      {props.children}\n    </CountriesContext.Provider>\n  );\n};\n\nexport default CountriesProvider;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport CountriesProvider from \"./store/CountriesProvider\";\n\nReactDOM.render(\n  <CountriesProvider>\n    <App />\n  </CountriesProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}